service:
  name: serverless-plugin-challenge

plugins:
  - serverless-plugin-upload-s3
  - custom-create-service-bucket
  - custom-post-deploy

custom:
  s3Key: "uploads/${self:provider.stage}/deployData.json"
  filesToUpload:
    - localPath: ./src/deployData.json
      fileName: ${self:custom.s3Key}
      s3Bucket: ${self:service.name}

provider:
  name: aws
  runtime: nodejs12.x
  region: ${opt:region, 'us-east-2'}
  stage: ${env:NODE_ENV, 'development'}
  stackName: ${self:service.name}-${self:provider.stage}
  logRetentionInDays: 7
  deploymentBucket:
    name: ${self:service.name}
  deploymentPrefix: deploys
  iamRoleStatements:
  - Effect: Allow
    Action:
    - s3:GetObject
    Resource:
    - Fn::Join:
      - ''
      - - 'arn:aws:s3:::'
        - ${self:service.name}
        - "/*"
  - Effect: Allow
    Action:
    - dynamodb:PutItem
    Resource:
    - Fn::Join:
      - ''
      - - 'arn:aws:dynamodb:'
        - ${self:provider.region}
        - ":"
        - { Ref: "AWS::AccountId" }
        - ":table/"
        - ${self:resources.Resources.Table.Properties.TableName}

package:
  excludeDevDependencies: true

functions:
  postDeploy:
    name: ${self:service.name}-${self:provider.stage}-post-deploy-handler
    handler: "./src/s3ToDynamo.handler"
    environment:
      BUCKET: ${self:service.name}
      TABLE_NAME: ${self:resources.Resources.Table.Properties.TableName}

resources:
  Resources:
    Table:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service.name}-${self:provider.stage}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
